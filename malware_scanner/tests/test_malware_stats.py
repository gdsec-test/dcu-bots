import json
import logging
from datetime import datetime

import requests
from add_malware_stats import (retrieve_snow_malware_scanner_tickets,
                               time_format, time_format_elastic_search)
from mock import MagicMock, patch
from nose.tools import assert_equal, assert_is_none, assert_list_equal
from settings import config_by_name

_info = [
    {'path': 'htaccess.spam-seo.doorway.002 - html/.htaccess'},
    {'path': 'php.spam-seo.doorway-gen.043 - html/coupon-chlorine.php'}
]
DATA = [
    {
        'u_number': 'DCU00123456',
        'u_info': json.dumps(_info)
    },
    {
        'u_number': 'DCU001234567',
        'u_info': json.dumps(_info)
    }
]


class TestMalwareStatsFunctions:
    INVALID_DATE = 'Some Invalid Date'

    def __init__(self):
        self._app_settings = config_by_name['test']()
        self._logger = logging.getLogger(__name__)

    @patch.object(requests, 'get')
    def test_retrieve_snow_malware_scanner_tickets(self, _mock_get):
        response = {'result': DATA}
        data = DATA
        _mock_get.return_value = MagicMock(status_code=200)
        _mock_get.return_value.json.return_value = response
        assert_equal(retrieve_snow_malware_scanner_tickets(self._app_settings, self._logger), data)
        _mock_get.assert_called()

    @patch.object(requests, 'get')
    def test_retrieve_snow_malware_scanner_tickets_fail(self, _mock_get):
        _mock_get.return_value = MagicMock(status_code=400)
        assert_list_equal(retrieve_snow_malware_scanner_tickets(self._app_settings, self._logger), [])
        _mock_get.assert_called()

    @patch.object(requests, 'get', side_effect=Exception('Test'))
    def test_retrieve_snow_malware_scanner_tickets_exception(self, _mock_get):
        assert_list_equal(retrieve_snow_malware_scanner_tickets(self._app_settings, self._logger), [])
        _mock_get.assert_called()

    def test_time_format_success(self):
        assert_equal(time_format(datetime(2009, 12, 20, 15, 5), self._logger), "'2009-12-20','15:05:00'")

    def test_time_format_fail(self):
        assert_is_none(time_format(self.INVALID_DATE, self._logger))

    def test_time_format_elastic_search_success(self):
        assert_equal(time_format_elastic_search(datetime(2009, 12, 20, 15, 5), self._logger), '2009-12-20T15:05:00Z')

    def test_time_format_elastic_search_fail(self):
        assert_is_none(time_format_elastic_search(self.INVALID_DATE, self._logger))
