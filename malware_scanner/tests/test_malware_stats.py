import requests
from datetime import datetime
from mock import MagicMock, patch
from nose.tools import assert_equal
from malware_scanner.add_malware_stats import retrieve_snow_malware_scanner_tickets, time_format


class TestMalwareStatsFunctions:
    @patch.object(requests, 'get')
    def test_retrieve_snow_malware_scanner_tickets(self, mocked_method):
        response = {"result": [{
            "u_number": "DCU00123456",
            "u_info": "[{'path': 'htaccess.spam-seo.doorway.002 - html/.htaccess'}, {'path': 'php.spam-seo.doorway-gen.043 - html/coupon-chlorine.php'}]"
        },
        {
            "u_number": "DCU001234567",
            "u_info": "[{'path': 'htaccess.spam-seo.doorway.002 - html/.htaccess'}, {'path': 'php.spam-seo.doorway-gen.043 - html/coupon-chlorine.php'}]"
        }]}
        data = [{
            "u_number": "DCU00123456",
            "u_info": "[{'path': 'htaccess.spam-seo.doorway.002 - html/.htaccess'}, {'path': 'php.spam-seo.doorway-gen.043 - html/coupon-chlorine.php'}]"
        },
        {
            "u_number": "DCU001234567",
            "u_info": "[{'path': 'htaccess.spam-seo.doorway.002 - html/.htaccess'}, {'path': 'php.spam-seo.doorway-gen.043 - html/coupon-chlorine.php'}]"
        }]
        mocked_method.return_value = MagicMock(status_code=200)
        mocked_method.return_value.json.return_value = response
        assert_equal(retrieve_snow_malware_scanner_tickets(), data)

    @patch.object(requests, 'get')
    def test_retrieve_snow_malware_scanner_tickets_fail(self, mocked_method):
        mocked_method.return_value = MagicMock(status_code=400)
        assert_equal(retrieve_snow_malware_scanner_tickets(), [])

    @patch.object(requests, 'get', side_effect=Exception('Test'))
    def test_retrieve_snow_malware_scanner_tickets_exception(self, mocked_method):
        assert_equal(retrieve_snow_malware_scanner_tickets(), [])

    def test_time_format_success(self):
        assert_equal(time_format(datetime(2009, 12, 20, 15, 5)), "'2009-12-20','15:05:00'")

    def test_time_format_fail(self):
        assert_equal(time_format("Some Invalid Date"), None)
